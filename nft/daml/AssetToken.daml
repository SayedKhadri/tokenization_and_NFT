module AssetToken where
import Daml.Script
import DA.Set as Set
import DA.Assert

data AssetType = AssetType with
    issuer : Party
    symbol : Text
        deriving (Eq, Show)


template Asset
    with
        assetType : AssetType
        owner : Party
        amount : Decimal
        observers : Set Party
    where
        signatory assetType.issuer, owner
        observer observers

        ensure amount > 0.0

        choice Asset_Transfer : ContractId AssetTransferProposal
            with newOwner : Party
            controller owner
                do
                    create AssetTransferProposal with asset = this; recipient = newOwner


template AssetTransferProposal
    with
        asset : Asset
        recipient : Party
    where
        signatory (signatory asset)
        observer recipient
        ensure asset.amount > 0.0

        choice AssetTransferProposal_Accept :   ContractId Asset
            controller recipient
                do
                    create asset with owner = recipient; observers = Set.empty
        
        choice AssetTransferProposal_Reject : ContractId Asset
            controller recipient
                do create asset
        
        choice AssetTransferProposal_Cancel : ContractId Asset
            controller asset.owner
                do create asset

test : Script ()
test = do
    [alice, bob] <- mapA allocateParty ["Alice", "Bob"]

    let
        alice_token = AssetType with
            issuer = alice
            symbol = "ALC"
            
    
    -- try mint asset with zero amount
    submitMustFail alice do
        createCmd Asset with assetType = alice_token; owner = alice; amount = 0.0; observers = Set.empty
    
    cid <- submit alice do
        createCmd Asset with assetType = alice_token; owner = alice; amount = 10.00; observers = Set.empty
    
    -- verify contract on ledger
    proposals <- query @Asset alice
    assertEq [Asset {assetType = AssetType {issuer = alice, symbol = "ALC"}, owner = alice, amount = 10.00, observers = Set.empty}] (map snd proposals)

    -- bob cann't see any contract
    proposals <- query @Asset bob
    assertEq [] (map snd proposals)


    -- transfer asset to bob
    submit alice do
        exerciseCmd cid Asset_Transfer with newOwner = bob

    -- verify proposal created
    trasferproposal <- query @AssetTransferProposal alice
    assertEq [AssetTransferProposal {asset = Asset {assetType = AssetType {issuer = alice, symbol = "ALC"}, 
        owner = alice, amount = 10.00, observers = Set.empty}, recipient = bob}] 
        (map snd trasferproposal)

    -- verify bob can alos see the proposal
    trasferproposal <- query @AssetTransferProposal bob
    assertEq [AssetTransferProposal {asset = Asset {assetType = AssetType {issuer = alice, symbol = "ALC"}, 
        owner = alice, amount = 10.00, observers = Set.empty}, recipient = bob}] 
        (map snd trasferproposal)
    

    pure ()